
#include<stdio.h>
#include<stdlib.h>

struct node
{
    float coef;
    int expo;
    struct node *link;
};

struct node *create(struct node *);
struct node *insert_s(struct node *,float,int);
struct node *insert(struct node *,float,int);
void display(struct node *ptr);
void poly_add(struct node *,struct node *);
void poly_mult(struct node *,struct node *);
void derivative(struct node *);
int main(void)
{
    struct node *head1=NULL,*head2=NULL, *head_deriv=NULL;
    
    printf("ENTER poly 1 :\n");
    head1=create(head1);

    printf("\nENTER poly 2 :\n");
    head2=create(head2);

    printf("\nPolynomial 1 is : \t ");
    display(head1);
    printf("\nPolynomial 2 is : \t ");
    display(head2);
        
    poly_add(head1, head2);
    poly_mult(head1, head2);
    printf("\n\n");
    // for derivative
    printf("\n\tEnter polynomial to find its derivative :\n");
    head_deriv=create(head_deriv);
	display(head_deriv);
	derivative(head_deriv);
	printf("\n\tThe derivative is:\t");
	display(head_deriv);
	return 0;
    
    
}

struct node *create(struct node *head)
{
    int i,n,ex;
    float co;
    printf("\n\tEnter the number of terms : \t");
    scanf("%d",&n);
    for(i=1;i<=n;i++)
    {
        printf("coef %d : ",i);
        scanf("%f",&co);
        printf("exp %d : ",i);
        scanf("%d",&ex);
        head=insert_s(head,co,ex);
    }
    return head;
}

struct node *insert_s(struct node *head,float co,int ex)
{
    struct node *ptr,*tmp;
    tmp=(struct node *)malloc(sizeof(struct node));
    tmp->coef=co;
    tmp->expo=ex;
    //list empty or exp greater than first one 
    if(head==NULL || ex > head->expo)
    {
        tmp->link=head;
        head=tmp;
    }
    else    
    {
        ptr=head;
        while(ptr->link!=NULL && ptr->link->expo >= ex)
            ptr=ptr->link;
        tmp->link=ptr->link;
        ptr->link=tmp;
    }
    return head;
}
    
struct node *insert(struct node *head,float co,int ex)
{
    struct node *ptr,*tmp;
    tmp=(struct node *)malloc(sizeof(struct node));
    tmp->coef=co;
    tmp->expo=ex;
    //If list is empty
    if(head==NULL)
    {
        tmp->link=head;
        head=tmp;
    }
    else    //Insert at the end of the list
    {
        ptr=head;
        while(ptr->link!=NULL)
            ptr=ptr->link;
        tmp->link=ptr->link;
        ptr->link=tmp;
    }
    return head;
}

void display(struct node *ptr)
{
	printf("\npoly eq is\t");
    if(ptr==NULL)
    {
        printf("Zero polynomial\n");
        return;
    }
    while(ptr!=NULL)
    {
        printf("  %.1fx^%d", ptr->coef,ptr->expo);
        ptr=ptr->link;
        if(ptr!=NULL)
            printf(" + ");
        else 
            printf("\n");
    }
}

void poly_add(struct node *p1,struct node *p2)
{
    struct node *head3;
    head3=NULL;
    
    while(p1!=NULL && p2!=NULL)
    {
        if(p1->expo > p2->expo)
        {
            head3=insert(head3,p1->coef,p1->expo);
            p1=p1->link;
        }
        else if(p2->expo > p1->expo)
        {
            head3=insert(head3,p2->coef,p2->expo);
            p2=p2->link;
        }
        else if(p1->expo==p2->expo)
        {
            head3=insert(head3,p1->coef+p2->coef,p1->expo);
            p1=p1->link;
            p2=p2->link;
        }
    }
    //if poly2 has finished and elements left in poly1
    while(p1!=NULL)
    {
        head3=insert(head3,p1->coef,p1->expo);
        p1=p1->link;
    }
    //if poly1 has finished and elements left in poly2
    while(p2!=NULL)
    {
        head3=insert(head3,p2->coef,p2->expo);
        p2=p2->link;
    }
    printf("\n\tSUM\t");
    display(head3);
}//End of poly_add() 

void poly_mult(struct node *p1, struct node *p2)
{
    struct node *head3;
    struct node *p2_beg = p2;
    head3=NULL;
    if(p1==NULL || p2==NULL)
    {
        printf("\n*zero polynomial*\n");
        return;
    }
    while(p1!=NULL)
    {
        p2=p2_beg;
        while(p2!=NULL)
        {
            head3=insert_s(head3,p1->coef*p2->coef,p1->expo+p2->expo);
            p2=p2->link;    
        }
        p1=p1->link;
    }    
    printf("\n\tPRODUCT\t");
    display(head3);
}

void derivative(struct node *p)
{
	struct node *temp = p;
	while(temp != NULL){
		if(temp->expo != 0){
			temp->coef = (temp->expo * temp->coef);
			temp->expo = temp->expo-1;
		}
		else {
			temp->coef = 0;
			temp->expo  = 0;
		}
		temp = temp->link;
	}
	
}
